{{> layout/header}}
<input type="hidden" id="paperId" value="{{model.paperId}}">

<style>
    .paper-form-card {
        background: #ffffff;
        border-radius: 16px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.06);
        padding: 2.5rem;
        max-width: 840px;
        margin: 0 auto;
    }

    .form-label {
        font-weight: 600;
        margin-bottom: 0.3rem;
    }

    .form-control,
    .form-select {
        border-radius: 10px;
    }

    .btn-primary {
        padding: 0.75rem;
        font-weight: bold;
        font-size: 1rem;
        border-radius: 12px;
        width: 100%;
    }

    .form-section {
        margin-bottom: 1.5rem;
    }

    .questionItem {
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 1rem;
        background-color: #f9f9f9;
        margin-top: 1rem;
    }

    /* 첫 번째 questionItem 위에는 마진 없음 */
    .questionItem:first-child {
        margin-top: 0;
    }

    /* rubric-box의 기본 상태는 숨김 */
    .rubric-box {
        margin-top: 0.75rem;
        display: none; /* 이 부분이 CSS에 추가되었습니다. */
    }
</style>

<div class="container mt-5 mb-5">
    <div class="paper-form-card">
        <form id="questionForm" enctype="multipart/form-data">
            <div class="form-section">
                <label for="elementId" class="form-label">능력단위 요소 선택 <span class="text-danger">*</span></label>
                <select class="form-select" id="elementId" required>
                    <option value="0">능력단위 요소를 선택해주세요 (필수)</option>
                    {{#model.elements}}
                        <option value="{{elementId}}">{{subtitle}}</option>
                    {{/model.elements}}
                </select>
            </div>

            <div class="form-section">
                <label for="questionNo" class="form-label">문제 번호</label>
                <input type="text" class="form-control" id="questionNo" placeholder="예: 1" value="{{model.expectNo}}"
                       required>
            </div>

            <div class="form-section">
                <label for="questionTitle" class="form-label">문제 제목</label>
                <input type="text" class="form-control" id="questionTitle" placeholder="문제 제목 입력" required>
            </div>

            <div class="form-section">
                <label for="stimulusImage" class="form-label">지문 이미지 (선택)</label>
                <input type="file" class="form-control" id="stimulusImage" accept="image/*">
            </div>

            <div class="form-section">
                <label class="form-label">문제 항목 (보기) <span class="text-danger">*</span></label>
                <div id="questionBox"></div>
                <button type="button" class="btn btn-outline-secondary mt-3" onclick="addOption()">+ 옵션 추가</button>
            </div>

            <button type="button" onclick="saveQuestion()" class="btn btn-primary mt-4">문제 등록</button>
        </form>
    </div>
</div>

<script>
    let optionCounter = 1;

    function addOption(no = optionCounter) {
        const box = document.querySelector("#questionBox");
        const div = document.createElement("div");
        div.className = "questionItem";
        div.innerHTML = `
            <input type="hidden" class="optionNo" value="${no}">
            <div class="mb-2">
                <label class="form-label">옵션 내용</label>
                <input type="text" class="form-control optionContent" placeholder="옵션 내용 입력">
            </div>
            <div class="form-check">
                <input type="checkbox" class="form-check-input optionCorrect" id="correct-${no}">
                <label class="form-check-label" for="correct-${no}">정답으로 설정</label>
            </div>
            <div class="rubric-box">
                <label class="form-label">정답 루브릭 설명</label>
                <input type="text" class="form-control optionRubric" placeholder="정답 기준 설명">
                <label class="form-label mt-2">배점</label>
                <input type="number" class="form-control optionPoint" placeholder="예: 10" min="1">
            </div>
        `;
        box.appendChild(div);
        optionCounter++;
    }

    window.onload = () => {
        addOption();
    };

    document.addEventListener("change", (e) => {
        if (e.target.classList.contains("optionCorrect")) {
            const clickedCheckbox = e.target;
            const checkboxes = document.querySelectorAll(".optionCorrect");

            // 1. 모든 체크박스의 루브릭 박스를 숨기고 값을 초기화합니다.
            //    그리고 클릭된 체크박스를 제외한 나머지는 체크를 해제합니다.
            checkboxes.forEach(cb => {
                const item = cb.closest(".questionItem");
                const rubricBox = item.querySelector(".rubric-box");
                const rubricInput = item.querySelector(".optionRubric");
                const pointInput = item.querySelector(".optionPoint");

                // 모든 루브릭 박스를 숨기고 값 초기화
                rubricBox.style.display = "none";
                rubricInput.value = "";
                pointInput.value = "";

                // 현재 클릭된 체크박스가 아니라면 체크를 해제합니다.
                if (cb !== clickedCheckbox) {
                    cb.checked = false;
                }
            });

            // 2. 이제 클릭된 체크박스가 'checked' 상태라면 해당 루브릭 박스만 보이게 합니다.
            if (clickedCheckbox.checked) {
                const item = clickedCheckbox.closest(".questionItem");
                const rubricBox = item.querySelector(".rubric-box");
                rubricBox.style.display = "block";
            }
            // 만약 클릭된 체크박스가 checked가 아니라면 (사용자가 직접 해제한 경우),
            // 이미 1단계에서 숨겨지고 초기화되었으므로 추가 작업은 필요 없습니다.
        }
    });

    async function saveQuestion() {
        const formData = {
            elementId: document.getElementById("elementId").value,
            paperId: document.getElementById("paperId").value,
            questionNo: document.getElementById("questionNo").value,
            questionTitle: document.getElementById("questionTitle").value,
            stimulusFileBase64: "",
            options: []
        };

        const fileInput = document.getElementById("stimulusImage");
        await new Promise((resolve) => {
            convertFileToBase64(fileInput, (base64) => {
                formData.stimulusFileBase64 = base64;
                resolve();
            });
        });

        const optionItems = document.querySelectorAll("#questionBox .questionItem");

        for (const item of optionItems) {
            const optionNo = item.querySelector(".optionNo").value;
            const optionContent = item.querySelector(".optionContent").value;
            const isCorrect = item.querySelector(".optionCorrect").checked;
            const rubricItem = item.querySelector(".optionRubric").value;
            const pointValue = item.querySelector(".optionPoint").value;

            formData.options.push({
                optionNo: optionNo,
                optionContent: optionContent,
                optionPoint: isCorrect ? Number(pointValue) : 0,
                rubricItem: isCorrect ? rubricItem : ""
            });
        }

        // 서버 전송 로직 추가
        fetch(`/api/paper-menu/paper/${formData.paperId}/question/save`, {
            method: "POST",
            headers: {"Content-Type": "application/json"},
            body: JSON.stringify(formData)
        }).then(async res => {
            if (!res.ok) throw new Error((await res.json()).msg);
            location.href = `/api/paper-menu/paper/${formData.paperId}`;
        }).catch(err => {
            alert(err.message);
        });
    }

    function convertFileToBase64(fileInput, callback) {
        const file = fileInput.files[0];
        if (!file) {
            callback("");
            return;
        }
        const reader = new FileReader();
        reader.onload = () => callback(reader.result);
        reader.readAsDataURL(file);
    }
</script>

{{> layout/footer}}