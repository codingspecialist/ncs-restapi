{{> layout/header}}
<input type="hidden" id="paperId" value="{{model.paperId}}">

<div class="container p-5">
    <form id="questionForm">
        <div class="card">
            <!-- 능력단위 요소 선택 -->
            <div class="card-header">
                <label for="elementId" class="form-label">능력단위 요소</label>
                <select class="form-select" id="elementId">
                    <option value="0">능력단위 요소를 선택해주세요 (필수)</option>
                    {{#model.elements}}
                        <option value="{{elementId}}">{{subtitle}}</option>
                    {{/model.elements}}
                </select>
            </div>

            <!-- 문제 번호 -->
            <div class="card-header">
                <label for="questionNo" class="form-label">문제 번호</label>
                <input type="text" class="form-control mt-1" placeholder="문제번호" value="{{model.expectNo}}"
                       id="questionNo">
            </div>

            <!-- 문제 제목 -->
            <div class="card-header">
                <label for="questionTitle" class="form-label">문제 제목</label>
                <input type="text" class="form-control mt-1" placeholder="문제 제목" id="questionTitle">
            </div>

            <!-- 문제 시나리오 -->
            <div class="card-header">
                <label for="scenario" class="form-label">문제 시나리오</label>
                <div class="text-end mb-1">
                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="insertScenarioExample()">
                        예시 입력
                    </button>
                </div>
                <textarea class="form-control mt-2" id="scenario" rows="4"
                          placeholder="쇼핑몰 관리자 페이지의 상품 등록 기능을 구현하시오.
- 요구사항: 상품명/가격 등록, 리스트 조회, 페이징
- 기술조건: Spring Boot, JPA, JWT 사용"></textarea>
                <small class="form-text text-muted">
                    ※ 각 항목은 <strong>줄바꿈(Enter)</strong>으로 구분해주세요. 한 줄당 하나의 항목으로 처리됩니다.
                </small>
            </div>

            <!-- 문제 시나리오 참고 링크 -->
            <div class="card-header">
                <label for="scenarioLink" class="form-label">문제 시나리오 참고 링크 <small
                        class="text-muted">(선택사항)</small></label>
                <input type="url" class="form-control" name="scenarioLink" id="scenarioLink"
                       placeholder="https://notion.so/your-scenario-doc">
                <small class="form-text text-muted">
                    ※ 시나리오를 상세하게 설명한 문서가 있다면 링크를 첨부해주세요.
                </small>
            </div>

            <!-- 루브릭 항목 -->
            <div class="card-header">
                <label class="form-label">루브릭 항목</label>
                <div id="questionBox" class="mt-2"></div>
                <button type="button" class="btn btn-secondary mt-2" onclick="addOption()">루브릭 추가</button>
            </div>
        </div>

        <button type="button" onclick="saveQuestion()" class="btn btn-primary form-control mt-3">문제 등록</button>
    </form>
</div>

<script>
    let optionCounter = 1;

    function addOption(no = optionCounter) {
        const box = document.querySelector("#questionBox");
        const div = document.createElement("div");
        div.className = "mt-2 mb-3 pl-2 questionItem";
        div.innerHTML = `
            <input type="hidden" class="form-control optionNo" value="${no}" readonly>
            <input type="text" class="form-control optionRubric mt-1" placeholder="루브릭 평가 항목 (필수)">
            <input type="number" class="form-control optionPoint mt-1" placeholder="점수 (예: 1~5)" required>
        `;
        box.appendChild(div);
        optionCounter++;
    }

    window.onload = () => {
        addOption();
    };

    function saveQuestion() {
        const formData = {
            elementId: document.getElementById("elementId").value,
            paperId: document.getElementById("paperId").value,
            questionNo: document.getElementById("questionNo").value,
            questionTitle: document.getElementById("questionTitle").value,
            scenario: document.getElementById("scenario").value,
            scenarioLink: document.getElementById("scenarioLink").value,
            options: []
        };

        const optionItems = document.querySelectorAll("#questionBox .questionItem");
        for (const item of optionItems) {
            const optionNo = item.querySelector(".optionNo").value;
            const optionPoint = parseInt(item.querySelector(".optionPoint").value);
            const rubricItem = item.querySelector(".optionRubric").value;

            if (isNaN(optionPoint) || optionPoint <= 0) {
                alert("점수를 정확히 입력해주세요.");
                return;
            }
            if (!rubricItem.trim()) {
                alert("루브릭 설명은 필수입니다.");
                return;
            }

            formData.options.push({
                optionNo,
                optionContent: "",
                optionPoint,
                rubricItem
            });
        }

        fetch(`/api/paper-menu/paper/${formData.paperId}/question/save`, {
            method: "POST",
            headers: {"Content-Type": "application/json"},
            body: JSON.stringify(formData)
        }).then(async res => {
            if (!res.ok) throw new Error((await res.json()).msg);
            location.href = `/api/paper-menu/paper/${formData.paperId}`;
        }).catch(err => {
            alert(err.message);
        });
    }

    function insertScenarioExample() {
        const exampleLines = [
            "쇼핑몰 관리자 페이지의 상품 등록 기능을 구현하시오.",
            "- 요구사항: 상품명/가격 등록, 리스트 조회, 페이징",
            "- 기술조건: Spring Boot, JPA, JWT 사용"
        ];
        document.getElementById("scenario").value = exampleLines.join("\n");
    }

</script>

{{> layout/footer}}