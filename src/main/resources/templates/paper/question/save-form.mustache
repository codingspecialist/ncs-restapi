{{> layout/header}}
<input type="hidden" id="paperId" value="{{model.paperId}}">
<input type="hidden" id="evaluationWay" value="{{model.evaluationWay}}">

<div class="container p-5">
    <form id="questionForm" enctype="multipart/form-data">
        <div class="card">
            <!-- 능력단위 요소 선택 -->
            <div class="card-header">
                <select class="form-select" id="elementId">
                    <option value="0">능력단위 요소를 선택해주세요 (필수)</option>
                    {{#model.elements}}
                        <option value="{{elementId}}">{{subtitle}}</option>
                    {{/model.elements}}
                </select>
            </div>

            <!-- 문제 번호 -->
            <div class="card-header">
                <b>문제 번호를 입력해주세요</b>
                <input type="text" class="form-control mt-1" placeholder="문제번호" value="{{model.expectNo}}"
                       id="questionNo">
            </div>

            <!-- 문제 제목 -->
            <div class="card-header">
                <b>문제 제목을 입력해주세요</b>
                <input type="text" class="form-control mt-1" placeholder="문제 제목" id="questionTitle">
            </div>

            <!-- 문제 점수 (객관식 전용) -->
            <div class="card-header" id="questionPointWrapper" style="display:none;">
                <b>문제 전체 점수를 입력해주세요 (객관식만)</b>
                <input type="number" class="form-control mt-1" placeholder="문제 점수" id="questionPoint">
            </div>

            <!-- 지문 이미지 -->
            <div class="card-header">
                <b>지문 이미지 (선택)</b>
                <input type="file" class="form-control mt-1" id="stimulusImage">
            </div>

            <!-- 문제 옵션 -->
            <div class="card-header">
                <b>문제 항목을 등록해주세요</b>
                <div id="questionBox" class="mt-2"></div>
                <button type="button" class="btn btn-secondary mt-2" onclick="addOption()">옵션 추가</button>
            </div>
        </div>

        <button type="button" onclick="saveQuestion()" class="btn btn-primary form-control mt-3">문제 등록</button>
    </form>
</div>

<script>
    let optionCounter = 1;

    const evalWay = document.getElementById("evaluationWay").value;
    if (evalWay === "OBJECTIVE") {
        document.getElementById("questionPointWrapper").style.display = "block";
    }

    function addOption(no = optionCounter) {
        const box = document.querySelector("#questionBox");
        const div = document.createElement("div");
        div.className = "mt-2 mb-3 pl-2 questionItem";

        if (evalWay === "OBJECTIVE") {
            div.innerHTML = `
              <input type="hidden" class="form-control optionNo" value="${no}" readonly>
              <input type="text" class="form-control optionContent" placeholder="옵션내용" required>
              <label class="mt-1">
                <input type="checkbox" class="optionCorrect"> 정답
              </label>
              <input type="text" class="form-control optionRubric mt-1" placeholder="루브릭 설명 (정답만 입력)" style="display:none;">
            `;
        } else {
            div.innerHTML = `
              <input type="hidden" class="form-control optionNo" value="${no}" readonly>
              <input type="text" class="form-control optionContent" placeholder="항목명" required>
              <input type="number" class="form-control optionPoint mt-1" placeholder="점수 (예: 20)" required>
              <input type="text" class="form-control optionRubric mt-1" placeholder="루브릭 설명 (필수)">
            `;
        }

        box.appendChild(div);
        optionCounter++;
    }

    window.onload = () => {
        addOption();
    };

    document.addEventListener("change", (e) => {
        if (e.target.classList.contains("optionCorrect")) {
            const checkboxes = document.querySelectorAll(".optionCorrect");
            checkboxes.forEach(cb => {
                if (cb !== e.target) cb.checked = false;
                const rubric = cb.closest(".questionItem").querySelector(".optionRubric");
                if (rubric) rubric.style.display = cb.checked ? "block" : "none";
                if (!cb.checked && rubric) rubric.value = "";
            });
        }
    });

    async function saveQuestion() {
        const formData = {
            elementId: document.getElementById("elementId").value,
            paperId: document.getElementById("paperId").value,
            questionNo: document.getElementById("questionNo").value,
            questionTitle: document.getElementById("questionTitle").value,
            stimulusFileBase64: "",
            options: []
        };

        if (evalWay === "OBJECTIVE") {
            const questionPoint = parseInt(document.getElementById("questionPoint").value || "0");
            if (isNaN(questionPoint) || questionPoint <= 0) {
                alert("문제 점수를 입력해주세요.");
                return;
            }
            formData.questionPoint = questionPoint;
        }

        const fileInput = document.getElementById("stimulusImage");
        await new Promise((resolve) => {
            convertFileToBase64(fileInput, (base64) => {
                formData.stimulusFileBase64 = base64;
                resolve();
            });
        });

        const optionItems = document.querySelectorAll("#questionBox .questionItem");
        let correctChecked = 0;

        for (const item of optionItems) {
            const optionContent = item.querySelector(".optionContent").value;
            const optionNo = item.querySelector(".optionNo").value;

            if (evalWay === "OBJECTIVE") {
                const isCorrect = item.querySelector(".optionCorrect").checked;
                const rubricInput = item.querySelector(".optionRubric");

                if (isCorrect) {
                    correctChecked++;
                    if (!rubricInput.value.trim()) {
                        alert("객관식 정답 항목에는 루브릭 설명이 필요합니다.");
                        return;
                    }
                }

                formData.options.push({
                    optionNo,
                    optionContent,
                    optionPoint: isCorrect ? formData.questionPoint : 0,
                    rubricItem: isCorrect ? rubricInput.value : ""
                });
            } else {
                const optionPoint = item.querySelector(".optionPoint").value;
                const rubricItem = item.querySelector(".optionRubric").value;

                if (!rubricItem.trim()) {
                    alert("루브릭 설명은 필수입니다.");
                    return;
                }

                formData.options.push({
                    optionNo,
                    optionContent,
                    optionPoint,
                    rubricItem
                });
            }
        }

        if (evalWay === "OBJECTIVE" && correctChecked !== 1) {
            alert("객관식은 정확히 하나의 정답만 선택해야 합니다.");
            return;
        }

        fetch(`/api/paper-menu/paper/${formData.paperId}/question/save`, {
            method: "POST",
            headers: {"Content-Type": "application/json"},
            body: JSON.stringify(formData)
        }).then(async res => {
            if (!res.ok) throw new Error((await res.json()).msg);
            location.href = `/api/paper-menu/paper/${formData.paperId}`;
        }).catch(err => {
            alert(err.message);
        });
    }
</script>

{{> layout/footer}}
